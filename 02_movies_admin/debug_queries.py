#!/usr/bin/env python
"""Django's command-line utility for administrative tasks."""
import datetime
import os
import timeit

import django
from django.contrib.postgres.aggregates import ArrayAgg
from django.db import connection, models, reset_queries
from django.db.models import Count, ExpressionWrapper, F, Q
from django.db.models.functions import Abs, ExtractDay

os.environ.setdefault("DJANGO_SETTINGS_MODULE", "config.settings")
django.setup()


from movies.models import Filmwork, Genre, GenreFilmwork, Person, PersonFilmWork

reset_queries()

# select_related - forieng key
""" filmworks_genres = GenreFilmwork.objects.all().select_related("film_work", "genre")[:3]
for filmwork_genre in filmworks_genres:
    print(filmwork_genre.film_work.title, " - ", filmwork_genre.genre.name)

reset_queries()
 """

# prefetch_related - M2M
""" filmworks = Filmwork.objects.prefetch_related("genres", "persons").filter(
    title__icontains="Star wars"
)[:10]

for filmwork in filmworks:
    print(filmwork.genres.all())
    print(filmwork.persons.all()) """

# prefetch_related + select_related
""" filmworks = (
    Filmwork.objects.prefetch_related("genres", "persons")
    .select_related()
    .filter(title__icontains="Star wars")[:10]
)
for filmwork in filmworks:
    print(filmwork.genres.all())
    print(filmwork.persons.all())
 """

# slices
""" all_genres = Genre.objects.all()
print(all_genres[:5])
print(all_genres[5:10]) """


# –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –º–æ–∂–Ω–æ —É–º–µ–Ω—å—à–∏—Ç—å, –∑–∞–¥–µ–π—Å—Ç–≤–æ–≤–∞–≤ prefetch_related
""" star_wars_films = Filmwork.objects.prefetch_related("genres", "persons").filter(
    title__icontains="Star Wars"
)[:10]

for filmwork in star_wars_films:
    print(filmwork.genres.all())
    print(filmwork.persons.filter(full_name="Robert")) """


# Count vs len
""" def a():
    Filmwork.objects.filter(genres__name="Western").count()


def b():
    len(Filmwork.objects.filter(genres__name="Western"))


print(timeit.timeit(a, number=100))
print(timeit.timeit(b, number=100))
 """

# filter-chain
""" films = Filmwork.objects.filter(title__startswith="Star").filter(rating__range=[6, 9]) """


# Q - –≤—ã—Ä–∞–∂–µ–Ω–∏—è. –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ò–õ–ò
""" films = Filmwork.objects.filter(
    Q(rating__gte=8, creation_date__gte=datetime.date(year=2020, month=1, day=1))
    | Q(rating=1)
).count() 
"""


# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ–ª–µ–π –≤–Ω—É—Ç—Ä–∏ –∑–∞–ø—Ä–æ—Å–∞
""" need_to_increase_rating = Filmwork.objects.filter(persons__full_name="Samuli Torssonen")
for film in need_to_increase_rating:
    print(film.title, film.description, film.rating)

need_to_increase_rating.update(rating=F("rating") + 0.2) """

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –ø–æ–ª–µ–π –∏ —Ä–∞—Å—á—ë—Ç—ã –ø–æ –≤—Å–µ–º—É QuerySet
# –Ω–∞–∏–≤–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥—Å—á–µ—Ç–∞
""" actors = Person.objects.filter(
    personfilmwork__role=PersonFilmWork.RoleInWorkfilm.ACTOR
).prefetch_related("filmwork_set")
for actor in actors:
    print(actor.full_name, actor.filmwork_set.count()) """


# —Ç–æ –∂–µ —Å–∞–º–æ–µ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –≤—Å–µ–≥–æ –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º, –∏—Å–ø–æ–ª—å–∑—É—è –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏.
""" print(
    *Person.objects.filter(personfilmwork__role=PersonFilmWork.RoleInWorkfilm.ACTOR)
    .values_list("full_name")
    .annotate(count=Count("filmwork")),
    sep="\n"
)

print(
    Person.objects.filter(personfilmwork__role=PersonFilmWork.RoleInWorkfilm.ACTOR)
    .values("full_name")
    .annotate(count=Count("filmwork"))
)

print(
    Person.objects.filter(
        personfilmwork__role=PersonFilmWork.RoleInWorkfilm.ACTOR
    ).values("full_name")
) """

# –î–æ–ø—É—Å—Ç–∏–º, –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏ —Ñ–∏–ª—å–º, –∫–æ—Ç–æ—Ä—ã–π –±—ã–ª –≤—ã–ø—É—â–µ–Ω –≤ –ø—Ä–æ–∫–∞—Ç –Ω–µ–¥–∞–ª–µ–∫–æ –æ—Ç –≤–∞–∂–Ω–æ–π –¥–ª—è –≤–∞—Å –¥–∞—Ç—ã. –î–ª—è —ç—Ç–æ–≥–æ –≤–∞–º –Ω—É–∂–Ω–æ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –¥–∞—Ç–∞–º–∏ –∏—Å–ø–æ–ª—å–∑—É—è F, –ø—Ä–∏–≤–µ—Å—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –¥–Ω–µ–π –ø—Ä–∏ –ø–æ–º–æ—â–∏ ExtractDay, –∏–∑–±–∞–≤–∏—Ç—Å—è –æ—Ç –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –ø—Ä–∏ –ø–æ–º–æ—â–∏ Abs, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ –ø–æ–ª—É—á–∏–≤—à–µ–º—É—Å—è —á–∏—Å–ª—É –∏ –≤–∑—è—Ç—å –ø–µ—Ä–≤—ã–π —Ñ–∏–ª—å–º.

""" filmwork_qs = Filmwork.objects.all()
expr = ExtractDay(
    ExpressionWrapper(
        datetime.datetime(2018, 11, 8) - F("creation_date"),
        output_field=models.DateField(),
    )
)
film = (
    filmwork_qs.annotate(delta=expr)
    .filter(delta__isnull=False)
    .annotate(abs_delta=Abs("delta"))
    .order_by("abs_delta")
    .first()
)
print(film) """

# –ê–≥—Ä–∏–≥–∞—Ü–∏—è
""" Filmwork.objects.filter(persons__full_name='Harrison Ford').aggregate(Avg('rating'))
 """

# RAW sql
""" film = Filmwork.objects.raw(
    'SELECT id, age(creation_date) AS age FROM "content"."film_work"'
)[0]
print(film.title, film.age) """

# Func
""" from django.db.models import F, Func

class SwitchFullname(Func):
    function = 'regexp_replace'  
    template = r'''%(function)s(%(expressions)s, '(\w+)(\W+)(\w+)', '\3\2\1')'''  

Person.objects.update(full_name=SwitchFullname(F('full_name')))

 """


# –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã –æ–±—ä–µ–∫—Ç–æ–≤ —Ç–∞–∫–æ–π —Å–ø–æ—Å–æ–± –±—É–¥–µ—Ç –Ω–µ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–µ–Ω: –≤–∞–º –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è —Å—Ç–æ–ª—å–∫–æ –∂–µ –∑–∞–ø—Ä–æ—Å–æ–≤, —Å–∫–æ–ª—å–∫–æ –∑–∞–ø–∏—Å–µ–π –≤ –≤–∞—à–µ–π –≥—Ä—É–ø–ø–µ. –ß—Ç–æ–±—ã –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏—è —Å –Ω–∞–±–æ—Ä–∞–º–∏ –æ–±—ä–µ–∫—Ç–æ–≤, –≤ Django —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã –º–µ—Ç–æ–¥—ã bulk_create –∏ bulk_update. –û–Ω–∏ –ø—Ä–∏–Ω–∏–º–∞—é—Ç –Ω–∞ –≤—Ö–æ–¥ —Å–ø–∏—Å–æ–∫ —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –∫–ª–∞—Å—Å–∞ –º–æ–¥–µ–ª–∏.
# –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—Å–µ –∑–∞–ø–∏—Å–∏ —Å–æ–∑–¥–∞—é—Ç—Å—è –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º. –ù–æ –µ—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å —Å—Ä–∞–∑—É –º–Ω–æ–≥–æ –∑–∞–ø–∏—Å–µ–π, SQL-–∑–∞–ø—Ä–æ—Å –ø–æ–ª—É—á–∏—Ç—Å—è –æ—á–µ–Ω—å –±–æ–ª—å—à–∏–º. –í —ç—Ç–æ–º —Å–ª—É—á–∞–µ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–∑–≤–æ–ª–∏—Ç—å Django —Ä–∞–∑–¥–µ–ª–∏—Ç—å –µ–≥–æ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ, —É–∫–∞–∑–∞–≤ –ø–∞—Ä–∞–º–µ—Ç—Ä batch_size.

""" Filmwork.objects.bulk_create(large_filmworks_list, batch_size=500) 

Genre.objects.bulk_create([Genre(name='Science fiction'), Genre(name='Philosophical')])  """

# bulk_update
""" persons_without_birthday = Person.objects.filter(birth_date__isnull=True)

for person in persons_without_birthday:
    person.birth_date = get_birthday(person.full_name)

Person.objects.bulk_update(persons_without_birthday, field=['birth_date'])  """

# –ê—Ç–æ–º–∞—Ä–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (django.db.transaction.atomic)
""" 
import random 

from django.db import transaction

def get_rating_from_imdb(filmname):
    rating = random.randint(0,6)
    if rating == 6:
        raise Exception("üëø")
    return rating
        
# –û—Ç–∫—Ä—ã—Ç–∏–µ –Ω–æ–≤–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
@transaction.atomic
def create_film_pack(filmname):
    # –ù–∞—á–∞–ª–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    # –ü–∞–¥–µ–Ω–∏–µ –ª—é–±–æ–≥–æ —É—á–∞—Å—Ç–∫–∞ –∫–æ–¥–∞ –ø—Ä–∏–≤–µ–¥—ë—Ç –∫ –æ—Ç–∫–∞—Ç—É –∏–∑–º–µ–Ω–µ–Ω–∏–π 
    add_film(filmname)
    add_actors(filmname)
    get_rating_from_imdb(filmname)
    add_genres(filmname)
    # –ï—Å–ª–∏ –±–ª–æ–∫ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —É—Å–ø–µ—à–Ω–æ, –ø—Ä–æ–∏–∑–æ–π–¥—ë—Ç –∫–æ–º–º–∏—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏  """

# –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∑–∞–ø–∏—Å–µ–π
# https://postgrespro.ru/docs/postgresql/12/sql-select#SQL-FOR-UPDATE-SHARE

""" persons_without_birthday = Person.objects.select_for_update().filter(birth_date__isnull=True)  # –°–æ–∑–¥–∞–Ω–∏–µ –ª–µ–Ω–∏–≤–æ–≥–æ QuerySet
with transaction.atomic():  # –ù–∞—á–∞–ª–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    for person in persons_without_birthday:  # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ QuerySet: –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Å—Ç—Ä–æ–∫ –Ω–∞ —É—Ä–æ–≤–Ω–µ –ë–î
        person.birth_date = get_birthday(person.full_name) 
    ...

# –ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –±—É–¥–µ—Ç —Å–Ω—è—Ç–∞  """

# –ï—Å–ª–∏ –≤ –∑–∞–ø—Ä–æ—Å–µ —Å select_for_update —É–∫–∞–∑–∞–Ω select_related, Django –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø—ã—Ç–∞–µ—Ç—Å—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã. –ß—Ç–æ–±—ã —ç—Ç–æ–≥–æ –Ω–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏–ª–æ, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä of, –≤ –∫–æ—Ç–æ—Ä–æ–º –º–æ–∂–Ω–æ –ø–µ—Ä–µ—á–∏—Å–ª–∏—Ç—å —Ç–æ–ª—å–∫–æ —Ç–∞–±–ª–∏—Ü—ã, —Ç—Ä–µ–±—É—é—â–∏–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏.

""" genres = GenreFilmWork.objects.select_for_update(of=('self',)).select_related('filmwork').filter(filmwork__title='Pop Star on Ice')
with transaction.atomic():
    for person in persons_without_birthday:
        person.birth_date = get_birthday(person.full_name) """

# –ó–∞–ø—É—Å–∫ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (transaction.on_commit)

""" from django.db import transaction

with transaction.atomic():
    user = create_user()
    create_profile(user)
    add_random_profile_photo(user)
    transaction.on_commit(
        lambda: set_task_for_send_email_congratulations(user) 
    )  """


# # –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ñ–∏–ª—å–º—ã
# films = Filmwork.objects.prefetch_related("genres", "persons")[:5]
# for film in films:
#     actors = film.persons.all()
#     print(actors)


# –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ñ–∏–ª—å–º—ã

""" films = (
    Filmwork.objects.prefetch_related("genres", "person").values().all().annotate(genres=ArrayAgg("genres__name"))[:5]
)
print(films) """

from movies.models import PersonFilmWork as PF

actors = ArrayAgg("persons__full_name", filter=Q(personfilmwork__role=PF.RoleInFilmwork.ACTOR), distinct=True)
directors = ArrayAgg(
    "persons__full_name",
    filter=Q(personfilmwork__role=PF.RoleInFilmwork.DIRECTOR),
    distinct=True,
)
writers = ArrayAgg("persons__full_name", filter=Q(personfilmwork__role=PF.RoleInFilmwork.WRITER), distinct=True)
genres = ArrayAgg("genres__name", distinct=True)
films = (
    Filmwork.objects.prefetch_related("genres", "person")
    .all()
    .values()
    .annotate(
        genres=genres,
        actors=actors,
        directors=directors,
        writers=writers,
    )
)
print(films.get(id="00af52ec-9345-4d66-adbe-50eb917f463a"))

print("\n", connection.queries)
print(len(connection.queries))


# "some_field"
# "-some_field"
# from django.db.models import F

# print(F("-some_field").desc())

""" from django.utils.decorators import classonlymethod


class A:
    a = 1

    def __init__(self) -> None:
        self.a = 10
        self.b = 2

    def getA(self):
        return self.a

    @classonlymethod
    def as_view(cls, **initkwargs):
        print("–ü—Ä–∏–≤–µ—Ç")


def simpleF(arg1):
    print("—è –ø–µ—á–∞—Ç–∞—é -", arg1)


def simpleD(func):
    def func_wrapper():
        print("–ù–∞—á–∞–ª–æ –≤—Ä–∞–ø–µ—Ä–∞")
        func()
        print("–ö–æ–Ω–µ—Ü –≤—Ä–∞–ø–µ—Ä–∞")

    return func_wrapper """


# simpleF = simpleD(simpleF("a"))
# simpleF()

""" 
def a(a):
    def b(b):
        print(a * b)

    return b


f10 = a(10)
f10(5)

f20 = a(10)(5)
 """
